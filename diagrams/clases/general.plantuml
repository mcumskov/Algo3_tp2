@startuml
!include clase_juego.plantuml
!include clase_gestorTurnos.plantuml
!include clase_jugador.plantuml
!include clase_mapa.plantuml
!include parser/clase_parser.plantuml

!include clase_gladiador.plantuml
!include clase_dado.plantuml

!include seniority/diagrama_seniority.plantuml
!include equipamiento/diagrama_equipamiento_actual.plantuml
!include estado/diagrama_estado.plantuml
!include casilla/diagrama_casilla.plantuml

class CasillaInicio {
  + CasillaInicio(Coordenada, iCasilla):
  - gladiadoresEnLaCasilla: List<Gladiador>
  - casillaSiguiente: iCasilla
  - coordenada: Coordenada
  + esContigua(iCasilla): boolean
  + getCoordenada(): Coordenada
  + agregarObserver(Observer): void
  + recibir(Gladiador): void
  + buscadoEstaEnLaCasilla(Gladiador): iCasilla
  + setSiguiente(iCasilla): void
  + getObstaculo(): Obstaculo
  + getPremio(): Premio
  + moverGladiador(int, Gladiador): void
  + esContigua(Coordenada): boolean
  + getGladiadores(): List<Gladiador>
  + expulsar(Gladiador): void
  + validarPosicionEnCamino(int, int): void
}

class CasillaFinal {
  + CasillaFinal(Coordenada):
  - casillaSiguiente: iCasilla
  - coordenada: Coordenada
  - gladiadoresEnLaCasilla: List<Gladiador>
  + buscadoEstaEnLaCasilla(Gladiador): iCasilla
  + esContigua(Coordenada): boolean
  + getObstaculo(): Obstaculo
  + recibir(Gladiador): void
  + validarPosicionEnCamino(int, int): void
  + expulsar(Gladiador): void
  + getCoordenada(): Coordenada
  + getPremio(): Premio
  + setSiguiente(iCasilla): void
  + moverGladiador(int, Gladiador): void
  + getGladiadores(): List<Gladiador>
  + esContigua(iCasilla): boolean
  + agregarObserver(Observer): void
}


class Log {
  - Log():
  - logger: Logger
  - mensajeAImprimir: String
  - instancia: Log
  + getLog(): Log
  + agregarABuffer(String): void
  + imprimirMensaje(): void
  - construirLogger(): void
  + obtenerLogger(): Logger
}



class LogFormatter {
  + LogFormatter():
  - calcularFecha(long): String
  + format(LogRecord): String
}

Log .>  LogFormatter

interface iMapa << interface >> {
  + ingresarGladiadores(List<Gladiador>, int): void
  + getLargo(): int
  + getCasillas(): List<iCasilla>
  + moverGladiador(Gladiador, int): void
  + getAncho(): int
  + enviarAMitad(Gladiador): void
}



interface iJugador << interface >> {
  + jugar(iDado, iMapa): void
  + getNombre(): String
  + getGladiador(): Gladiador
}



interface iDado {
    public int lanzar();
}


iCasilla ^-. CasillaInicio
iCasilla ^-. CasillaFinal
Juego o- iMapa
iMapa <|-. Mapa
Mapa .-> Gladiador
Juego o-- iGestorTurnos
Juego o- iDado
iDado <|. Dado
GestorTurnos o-- "2..6 " iJugador
iJugador <|-. Jugador
Jugador *-- Gladiador
Jugador ..> iDado
Jugador ...> iMapa
Juego "1..2"  o-- iJugador
Coordenada <.. CasillaFinal
Coordenada <. CasillaInicio


Mapa o-- "2..*"iCasilla
iCasilla o- "0..6 " Gladiador
iCasilla <. Gladiador

Gladiador o-- ISeniority
Gladiador o- IEquipamiento
Gladiador o-- Estado

Parser .--> iCasilla


interface ISeniority <<interface>> {
}


interface IEquipamiento <<interface>> {

}

@enduml
