@startuml
skinparam linetype ortho


class ControladorJuego {
  + ControladorJuego(Stage, iMapa, int, String[]):
  - anchoCasilla: int
  - vistaJuego: VistaJuego
  - mainStage: Stage
  - nombres: String[]
  - cantidadPlayers: int
  - mapa: iMapa
  - largoCasilla: int
  - juego: Juego
  - buttons: List<Button>
  - dibujarCirculo(GraphicsContext, double, double, double, Color): void
  + dibujarCasilla(Canvas, iCasilla): void
  + chequearGanador(iJugador): void
  - dibujarGladiadores(iCasilla, GraphicsContext): void
  - getNodo(GridPane, int, int)
  + start(): void
  + update(Observable, Object): void
  + crearDatosJugador(Dado, List<Gladiador>): GridPane
  + mostrarDatosJugadorSiguiente(List<Label>): void
  + tirarDado(): void
  + mostrarResultadoDado(Dado, Label): void
  + mostrarDatosFinDeTurnoJugador(List<Label>): void
  + crearMapa(): GridPane
  + terminarTurno(): void
  - dibujarPremioObstaculo(iCasilla, GraphicsContext, GraphicsContext): void
}

class ControladorMenuInicio {
  + ControladorMenuInicio(Stage):
  - cantidadPlayers: int
  - nombres: String[]
  - vistaInicio: VistaMenuInicio
  - buttons: List<Button>
  - mainStage: Stage
  - miMapa: Mapa
  - getNodo(GridPane, int, int)
  - MostrarPantallaNombres(): void
  - PantallaelegirMapa(): void
  + nombreJugadores(String, int, int): void
  + start(): void
  - mostrarPantallaInicio(): void
  + iniciarJuego(): void
  - PantallaMostrarMapa(): void
}


class Parser {
    + parsearJSON(nombreJSON: String) : Mapa
}

class Mapa {
  + Mapa(int, int):
  - ancho: int
  - casillaMedio: iCasilla
  - casillaUltima: iCasilla
  - largo: int
  - casillas: List<iCasilla>
  + ingresarGladiadores(List<Gladiador>, int): void
  - EncontrarGladiador(Gladiador): iCasilla
  + moverGladiador(Gladiador, int): void
  + enviarAMitad(Gladiador): void
  + agregarCamino(List<iCasilla>): void
  + getAncho(): int
  + getLargo(): int
  + getCasillas(): List<iCasilla>
}

class Jugador {
  + Jugador(String, int):
  + Jugador():
  - MiGladiador: Gladiador
  - numeroPlayer: int
  - miNombre: String
  + getGladiador(): Gladiador
  + getNumeroPlayer(): int
  + getNombre(): String
  + jugar(iDado, iMapa): void
}
class Dado {
  + Dado(int):
  + Dado():
  - random: Random
  - caras: int
  - numeroObtenido: int
}

class GestorTurnos {
    - jugadorActual:Jugador
    - colaTurnos: Queue<Jugador>
    - contador: int
    - cantidadRondas: int
    + GestorTurnos(Jugadores:Jugador):GestorTurnos
    + agregarTurno(Jugador jugador)
    + getJugadorActual():Jugador
    + determinarPrimerJugador()
    +siguienteTurno()
    +finalizarSinGanador()

}


class Juego {
  - {static}instancia: Juego
  - Juego(iMapa, iDado, iGestorTurno):
  - jugadorActual: iJugador
  - ganador: iJugador
  + {static}instanciarJuego(iMapa, iDado, iGestorTurno): Juego
  + tirarDado(): iJugador
  + siguienteTurno(): void
  - buscarGanador(): void
  - moverGladiadorAMitadMapa(Gladiador): void
  + {static}gladiadorSinLlaveLlegaAlFinal(Gladiador gladiador)
  + {static} gladiadorConLlaveLlegaAlFinal()
  + {static} resetInstancia()
  + getJugadorActual(): iJugador
  + getGanador(): iJugador
}

 ControladorMenuInicio *-- ControladorJuego
 ControladorMenuInicio o- Mapa
 ControladorMenuInicio o- Parser
 ControladorJuego .> Mapa
  ControladorJuego o-- Jugador
  Dado --o ControladorJuego
  ControladorJuego o-- GestorTurnos
  ControladorJuego o-- Juego

@enduml