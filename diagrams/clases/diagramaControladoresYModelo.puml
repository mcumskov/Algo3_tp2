@startuml
skinparam linetype ortho


class ControladorJuego {
  + ControladorJuego(Stage, iMapa, int, String[]):
  - anchoCasilla: int
  - vistaJuego: VistaJuego
  - mainStage: Stage
  - nombres: String[]
  - cantidadPlayers: int
  - mapa: iMapa
  - largoCasilla: int
  - juego: Juego
  - buttons: List<Button>
  - dibujarCirculo(GraphicsContext, double, double, double, Color): void
  + dibujarCasilla(Canvas, iCasilla): void
  + chequearGanador(iJugador): void
  - dibujarGladiadores(iCasilla, GraphicsContext): void
  - getNodo(GridPane, int, int)
  + start(): void
  + update(Observable, Object): void
  + crearDatosJugador(Dado, List<Gladiador>): GridPane
  + mostrarDatosJugadorSiguiente(List<Label>): void
  + tirarDado(): void
  + mostrarResultadoDado(Dado, Label): void
  + mostrarDatosFinDeTurnoJugador(List<Label>): void
  + crearMapa(): GridPane
  + terminarTurno(): void
  - dibujarPremioObstaculo(iCasilla, GraphicsContext, GraphicsContext): void
}

class ControladorMenuInicio {
  + ControladorMenuInicio(Stage):
  - cantidadPlayers: int
  - nombres: String[]
  - vistaInicio: VistaMenuInicio
  - buttons: List<Button>
  - mainStage: Stage
  - miMapa: Mapa
  - getNodo(GridPane, int, int)
  - MostrarPantallaNombres(): void
  - PantallaelegirMapa(): void
  + nombreJugadores(String, int, int): void
  + start(): void
  - mostrarPantallaInicio(): void
  + iniciarJuego(): void
  - PantallaMostrarMapa(): void
}


class Parser {
}

class Mapa {
}

class Jugador {
}
class Dado {
}

class GestorTurnos {

}


class Juego {
}

 ControladorMenuInicio *-- ControladorJuego
 ControladorMenuInicio o- Mapa
 ControladorMenuInicio o- Parser
 ControladorJuego .> Mapa
  ControladorJuego o-- Jugador
  Dado --o ControladorJuego
  ControladorJuego o-- GestorTurnos
  ControladorJuego o-- Juego

@enduml