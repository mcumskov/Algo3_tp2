@startuml

skinparam linetype ortho

interface Estado << interface >> {
  + avanzar(int, int): void
}

abstract class Equipamiento {
  + Equipamiento():
  + gladiador: Gladiador
  + reduccionDeDanio: int
  + abrirCasaPompeya(): void
  + mejorarEquipamiento(): void
  + mitigarDanio(int): void
}

class Mapa{
}

abstract class Seniority {
  + Seniority():
  + gladiador: Gladiador
  + recuperacionEnergia: int
  + turnosParaAscender: int
  + turnos: int
  + limiteAsencion: int
  + recuperarEnergia(): void
  + actualizar(): Seniority
}

class Casilla {
  + Casilla(Casilla, Evento):
  - siguiente: Casilla
  - evento: Evento
  + afectarConEvento(Gladiador): void
  + obtenerSiguiente(int): Casilla
}



class Gladiador {
  + Gladiador():
  + Gladiador(Casilla):
  - ganador: boolean
  - equipamiento: Equipamiento
  - energia: int
  - estado: Estado
  - casilla: Casilla
  - seniority: Seniority
  + recibirDanio(int): void
  + victoria(): void
  + cambiarEstado(Estado): void
  + getEquipamiento(): Equipamiento
  + irAMitadDelMapa(): void
  + mejorarEquipamiento(): void
  + avanzar(int): void
  + getEnergia(): int
  + cambiarEquipamiento(Equipamiento): void
  + cambiarEnergia(int): void
  + abrirCasaPompeya(): void
  + getEstado(): Estado
  + cambiarPosicion(int): void
  + getSeniority(): Seniority
  + recuperarEnergia(): void
  + cambiarSeniority(Seniority): void
  + getCasilla(): Casilla
  + getGanador(): boolean
}

Gladiador   *--  Estado
Gladiador   *--  Equipamiento
Gladiador   *--  Seniority
Gladiador   o- Casilla
Gladiador --> Mapa

@enduml
